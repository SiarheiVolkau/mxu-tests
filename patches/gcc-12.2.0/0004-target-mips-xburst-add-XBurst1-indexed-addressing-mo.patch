From 3ac4f537242b76049cd5395808dd86f740e722da Mon Sep 17 00:00:00 2001
From: Siarhei Volkau <lis8215@gmail.com>
Date: Mon, 17 Jul 2023 13:16:14 +0300
Subject: [PATCH 4/4] target/mips/xburst: add XBurst1 indexed addressing mode

Some MXU opcodes address memory by base GPR plus scaled offset GPR
address = GPRbase + (GPRoffset << STRD2)
where STRD2 is a contant in range 0..2.

The patch allows use that kind of address from inline assembly.
example:
 asm ("LXW $t1, %U[offs]" : :[offs] "m"(array[i]) : "t1");
 will generate something like: LXW $t1, $a0,$a1,2
---
 gcc/config/mips/mips.cc | 108 +++++++++++++++++++++++++++++++++++++++-
 1 file changed, 107 insertions(+), 1 deletion(-)

diff --git a/gcc/config/mips/mips.cc b/gcc/config/mips/mips.cc
index a16a4e44e..5c7f22b98 100644
--- a/gcc/config/mips/mips.cc
+++ b/gcc/config/mips/mips.cc
@@ -2717,6 +2717,70 @@ mips_lx_address_p (rtx addr, machine_mode mode)
   return false;
 }
 
+static bool
+mxu_valid_indexed_address (rtx addr, machine_mode mode)
+{
+  if (!(ISA_HAS_MXU1_R1 || ISA_HAS_MXU1_LX) || GET_MODE_SIZE (mode) > UNITS_PER_WORD)
+    return false;
+
+  if (GET_CODE (addr) == PLUS
+      && REG_P (XEXP (addr, 1)))
+    {
+      rtx offset = XEXP (addr, 0);
+
+      if (REG_P (offset))
+	return true;
+      else if (GET_CODE (offset) == MULT
+	&& REG_P (XEXP (offset, 0))
+	&& CONST_INT_P (XEXP (offset, 1))
+	&& ((INTVAL (XEXP (offset, 1)) == 4 || INTVAL (XEXP (offset, 1)) == 2)))
+	  return true;
+    }
+  return false;
+}
+
+static bool
+mxu_valid_offsetable_address (rtx addr, machine_mode mode)
+{
+  if (!ISA_HAS_MXU1_R1 || GET_MODE_SIZE (mode) > UNITS_PER_WORD)
+    return false;
+
+  if (GET_CODE (addr) == PLUS && REG_P (XEXP (addr, 0))
+      && CONSTANT_P (XEXP (addr, 1)))
+    {
+      HOST_WIDE_INT offset = INTVAL (XEXP (addr, 1));
+
+      switch (GET_MODE_SIZE (mode))
+	{
+	  case 1: return mips_signed_immediate_p (offset, 8, 0);
+	  case 2: return mips_signed_immediate_p (offset, 10, 0);
+	  case 4: return mips_signed_immediate_p (offset, 10, 2);
+	}
+	return false;
+    }
+  else if (GET_CODE (addr) == REG)
+    return true;
+  return false;
+}
+
+static bool
+mxu_valid_indexed_mem (rtx mem)
+{
+  if (GET_CODE (mem) != MEM)
+    return false;
+
+  return mxu_valid_indexed_address(XEXP (mem, 0), GET_MODE(mem));
+}
+
+static bool
+mxu_valid_offsetable_mem (rtx mem)
+{
+  if (GET_CODE (mem) != MEM)
+    return false;
+
+  return mxu_valid_offsetable_address(XEXP (mem, 0), GET_MODE(mem));
+}
+
 /* Return true if a value at OFFSET bytes from base register BASE can be
    accessed using an unextended MIPS16 instruction.  MODE is the mode of
    the value.
@@ -9175,7 +9239,8 @@ mips_print_operand_punct_valid_p (unsigned char code)
    'v'	Print the insn size suffix b, h, w or d for vector modes V16QI, V8HI,
 	  V4SI, V2SI, and w, d for vector modes V4SF, V2DF respectively.
    'V'	Print exact log2 of CONST_INT OP element 0 of a replicated
-	  CONST_VECTOR in decimal.  */
+	  CONST_VECTOR in decimal.
+   'U'	Print MXU address (all variants) */
 
 static void
 mips_print_operand (FILE *file, rtx op, int letter)
@@ -9363,6 +9428,47 @@ mips_print_operand (FILE *file, rtx op, int letter)
 	}
       break;
 
+    case 'U':
+      if (mxu_valid_indexed_mem (op))
+	{
+	  rtx base = XEXP (XEXP (op, 0), 1);
+	  rtx offset = XEXP (XEXP (op, 0), 0);
+	  int strd2 = 0;
+
+	  if (GET_CODE (offset) == MULT)
+	    {
+	      if (INTVAL (XEXP (offset, 1)) == 4)
+		strd2 = 2;
+	      else if (INTVAL (XEXP (offset, 1)) == 2)
+		strd2 = 1;
+	      offset = XEXP (offset, 0);
+	    }
+	  fprintf (file, "%s,%s,%d", reg_names[REGNO (base)], reg_names[REGNO (offset)], strd2);
+	}
+      else if (mxu_valid_offsetable_mem (op))
+	{
+          rtx addr = XEXP (op, 0);
+          rtx base;
+          HOST_WIDE_INT offset;
+          if (GET_CODE (addr) == REG)
+            {
+              base = addr;
+              offset = 0;
+            }
+          else
+            {
+              base = XEXP (addr, 0);
+              offset = INTVAL (XEXP (addr, 1));
+            }
+	  fprintf (file, "%s,%d", reg_names[REGNO (base)], offset);
+	}
+      else
+	{
+	  output_operand_lossage ("invalid use of '%%%c' modifier", letter);
+	  debug(op);
+	}
+      break;
+
     default:
       switch (code)
 	{
-- 
2.41.0

