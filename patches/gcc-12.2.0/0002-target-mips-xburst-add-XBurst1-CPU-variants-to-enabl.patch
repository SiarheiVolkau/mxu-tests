From 5d5c3d032b4441192e8c0cc3a1e21a26817cf3e1 Mon Sep 17 00:00:00 2001
From: Siarhei Volkau <lis8215@gmail.com>
Date: Sun, 16 Jul 2023 16:08:26 +0300
Subject: [PATCH 2/4] target/mips/xburst: add XBurst1 CPU variants to enable
 tune compiler to

jz4740 is used to represent XBurst 1 architecture which don't have FPU
jz4760 is used to represent XBurst 1 architecture which have FPU
jz4770 is used to represent XBurst 1 architecture which have FPU and
compatible with MIPS32R2 ISA.

All other XBurst1 CPUs can be represented through these 3 and
corresponding -mmxu option:
jz4720/jz4730: -mtune=jz4740 -mmxu=off
jz4725/jz4740: -mtune=jz4740 -mmxu=r1
jz4725b/50/55: -mtune=jz4740 -mmxu=r2|lx
jz4760/60b:    -mtune=jz4760 -mmxu=r2|lx
jz4770/75/80/x1000: -mtune=jz4770 -mmxu=r2|lx
subjects to change, no info about ISA level and SIMD extension:
x1021/x1500/x1520/x1600/x1830: -mtune=jz4760 -mmxu=off
---
 gcc/config/mips/mips-cpus.def |   5 +
 gcc/config/mips/mips.cc       |  35 ++++++
 gcc/config/mips/mips.h        |  30 ++---
 gcc/config/mips/mips.md       |   4 +
 gcc/config/mips/xburst.md     | 214 ++++++++++++++++++++++++++++++++++
 5 files changed, 274 insertions(+), 14 deletions(-)
 create mode 100644 gcc/config/mips/xburst.md

diff --git a/gcc/config/mips/mips-cpus.def b/gcc/config/mips/mips-cpus.def
index c0191b0bd..296f83bb5 100644
--- a/gcc/config/mips/mips-cpus.def
+++ b/gcc/config/mips/mips-cpus.def
@@ -176,3 +176,8 @@ MIPS_CPU ("xlp", PROCESSOR_XLP, MIPS_ISA_MIPS64R2, PTF_AVOID_BRANCHLIKELY_SPEED)
 MIPS_CPU ("i6400", PROCESSOR_I6400, MIPS_ISA_MIPS64R6, 0)
 MIPS_CPU ("i6500", PROCESSOR_I6400, MIPS_ISA_MIPS64R6, 0)
 MIPS_CPU ("p6600", PROCESSOR_P6600, MIPS_ISA_MIPS64R6, 0)
+
+/* Ingenic XBurst1 processors. */
+MIPS_CPU ("jz4740", PROCESSOR_JZ4740, MIPS_ISA_MIPS32, 0)
+MIPS_CPU ("jz4760", PROCESSOR_JZ4760, MIPS_ISA_MIPS32, 0)
+MIPS_CPU ("jz4770", PROCESSOR_JZ4770, MIPS_ISA_MIPS32R2, 0)
diff --git a/gcc/config/mips/mips.cc b/gcc/config/mips/mips.cc
index e64928f41..10ff69b7e 100644
--- a/gcc/config/mips/mips.cc
+++ b/gcc/config/mips/mips.cc
@@ -1158,6 +1158,41 @@ static const struct mips_rtx_cost_data
     COSTS_N_INSNS (8),            /* int_div_di */
 		    2,            /* branch_cost */
 		    4             /* memory_latency */
+  },
+  { /* JZ4740 */
+    SOFT_FP_COSTS,
+    COSTS_N_INSNS (4),            /* int_mult_si */
+    COSTS_N_INSNS (4),            /* int_mult_di */
+    COSTS_N_INSNS (36),           /* int_div_si */
+    COSTS_N_INSNS (36),           /* int_div_di */
+		     2,           /* branch_cost */
+		     4            /* memory_latency */
+  },
+  { /* JZ4760 */
+    COSTS_N_INSNS (6),            /* fp_add */
+    COSTS_N_INSNS (7),            /* fp_mult_sf */
+    COSTS_N_INSNS (8),            /* fp_mult_df */
+    COSTS_N_INSNS (23),           /* fp_div_sf */
+    COSTS_N_INSNS (36),           /* fp_div_df */
+    COSTS_N_INSNS (4),            /* int_mult_si */
+    COSTS_N_INSNS (4),            /* int_mult_di */
+    COSTS_N_INSNS (36),           /* int_div_si */
+    COSTS_N_INSNS (36),           /* int_div_di */
+		     2,           /* branch_cost */
+		     4            /* memory_latency */
+  },
+  { /* JZ4770 */
+    COSTS_N_INSNS (6),            /* fp_add */
+    COSTS_N_INSNS (7),            /* fp_mult_sf */
+    COSTS_N_INSNS (8),            /* fp_mult_df */
+    COSTS_N_INSNS (23),           /* fp_div_sf */
+    COSTS_N_INSNS (36),           /* fp_div_df */
+    COSTS_N_INSNS (4),            /* int_mult_si */
+    COSTS_N_INSNS (4),            /* int_mult_di */
+    COSTS_N_INSNS (36),           /* int_div_si */
+    COSTS_N_INSNS (36),           /* int_div_di */
+		     2,           /* branch_cost */
+		     4            /* memory_latency */
   }
 };
 
diff --git a/gcc/config/mips/mips.h b/gcc/config/mips/mips.h
index 92a02e4cd..c6bbcb1a7 100644
--- a/gcc/config/mips/mips.h
+++ b/gcc/config/mips/mips.h
@@ -816,10 +816,11 @@ struct mips_cpu_info {
      %{march=mips3|march=r4*|march=vr4*|march=orion|march=loongson2*:-mips3} \
      %{march=mips4|march=r8000|march=vr5*|march=rm7000|march=rm9000 \
        |march=r10000|march=r12000|march=r14000|march=r16000:-mips4} \
-     %{march=mips32|march=4kc|march=4km|march=4kp|march=4ksc:-mips32} \
+     %{march=mips32|march=4kc|march=4km|march=4kp|march=4ksc \
+       |march=jz4740|march=jz4760:-mips32} \
      %{march=mips32r2|march=m4k|march=4ke*|march=4ksd|march=24k* \
        |march=34k*|march=74k*|march=m14k*|march=1004k* \
-       |march=interaptiv: -mips32r2} \
+       |march=interaptiv|march=jz4770: -mips32r2} \
      %{march=mips32r3: -mips32r3} \
      %{march=mips32r5|march=p5600|march=m5100|march=m5101: -mips32r5} \
      %{march=mips32r6: -mips32r6} \
@@ -846,7 +847,8 @@ struct mips_cpu_info {
   "%{mhard-float|msoft-float|mno-float|march=mips*:; \
      march=vr41*|march=m4k|march=4k*|march=24kc|march=24kec \
      |march=34kc|march=34kn|march=74kc|march=1004kc|march=5kc \
-     |march=m14k*|march=m5101|march=octeon|march=xlr: -msoft-float; \
+     |march=m14k*|march=m5101|march=octeon|march=xlr \
+     |march=jz4740: -msoft-float; \
      march=*: -mhard-float}"
 
 /* A spec condition that matches 32-bit options.  It only works if
@@ -1377,22 +1379,22 @@ struct mips_cpu_info {
 #define ISA_HAS_CACHE (TARGET_CACHE_BUILTIN && !TARGET_MIPS16)
 
 /* ISA includes XBurst MXU version 1 revision 1 instruction set.  */
-#define ISA_HAS_MXU1_R1 \
-   ((xburst_mxu_version == XBURST_MXU_V1_R1 \
-     || xburst_mxu_version == XBURST_MXU_V1_R2) \
-    && !TARGET_MIPS16 && !TARGET_64BIT)
+#define ISA_HAS_MXU1_R1							\
+	((xburst_mxu_version == XBURST_MXU_V1_R1			\
+	  || xburst_mxu_version == XBURST_MXU_V1_R2)			\
+	 && !TARGET_MIPS16 && !TARGET_64BIT)
 
 /* ISA includes XBurst MXU version 1 revision 2 instruction set.  */
-#define ISA_HAS_MXU1_R2 \
-   ((xburst_mxu_version == XBURST_MXU_V1_R2) \
-    && !TARGET_MIPS16 && !TARGET_64BIT)
+#define ISA_HAS_MXU1_R2							\
+	((xburst_mxu_version == XBURST_MXU_V1_R2)			\
+	 && !TARGET_MIPS16 && !TARGET_64BIT)
 
 /* ISA includes only LX{B,H,W}{,U} instructions subset of MXU1 revision 2.
    Usable for targets which are not aware about MXU specific registers */
-#define ISA_HAS_MXU1_LX \
-   ((xburst_mxu_version == XBURST_MXU_V1_LX \
-     || xburst_mxu_version == XBURST_MXU_V1_R2) \
-    && !TARGET_MIPS16 && !TARGET_64BIT)
+#define ISA_HAS_MXU1_LX							\
+	((xburst_mxu_version == XBURST_MXU_V1_LX			\
+	  || xburst_mxu_version == XBURST_MXU_V1_R2)			\
+	 && !TARGET_MIPS16 && !TARGET_64BIT)
 
 /* Tell collect what flags to pass to nm.  */
 #ifndef NM_FLAGS
diff --git a/gcc/config/mips/mips.md b/gcc/config/mips/mips.md
index e0f0a5827..0478ff1d8 100644
--- a/gcc/config/mips/mips.md
+++ b/gcc/config/mips/mips.md
@@ -72,6 +72,9 @@
   m5100
   i6400
   p6600
+  jz4740
+  jz4760
+  jz4770
 ])
 
 (define_c_enum "unspec" [
@@ -1187,6 +1190,7 @@
 (include "octeon.md")
 (include "sb1.md")
 (include "sr71k.md")
+(include "xburst.md")
 (include "xlr.md")
 (include "xlp.md")
 (include "generic.md")
diff --git a/gcc/config/mips/xburst.md b/gcc/config/mips/xburst.md
new file mode 100644
index 000000000..aba63d774
--- /dev/null
+++ b/gcc/config/mips/xburst.md
@@ -0,0 +1,214 @@
+;; DFA-based pipeline descriptions for XBurst1 processor family
+;; Contributed by Siarhei Volkau (lis8215@gmail.com)
+;;
+;; Based on hazards defined in various Ingenic Programming Manuals.
+;;
+;; jz4740 - XBurst1 CPU with MIPS32 instruction set.
+;; jz4760 - XBurst1 CPU with MIPS32 instruction set and FPU.
+;; jz4770 - XBurst1 CPU with MIPS32r2 instruction set and FPU.
+;; other SOCs can be mapped to these three above.
+;;
+;; Copyright (C) 2005-2023 Free Software Foundation, Inc.
+;;
+;; This file is part of GCC.
+;;
+;; GCC is free software; you can redistribute it and/or modify it
+;; under the terms of the GNU General Public License as published
+;; by the Free Software Foundation; either version 3, or (at your
+;; option) any later version.
+
+;; GCC is distributed in the hope that it will be useful, but WITHOUT
+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
+;; License for more details.
+
+;; You should have received a copy of the GNU General Public License
+;; along with GCC; see the file COPYING3.  If not see
+;; <http://www.gnu.org/licenses/>.
+
+(define_automaton "xburst_cpu, xburst_mdu, xburst_ldst, xburst_fpu")
+
+;; --------------------------------------------------------------
+;; Integer Instructions
+;; --------------------------------------------------------------
+
+(define_cpu_unit "xburst_int_arith"  "xburst_cpu")
+(define_cpu_unit "xburst_int_mpydiv" "xburst_mdu")
+(define_cpu_unit "xburst_ldst"       "xburst_ldst")
+
+(define_insn_reservation "xburst_int_load" 3
+  (and (eq_attr "cpu" "jz4740,jz4760,jz4770")
+       (eq_attr "type" "load"))
+  "xburst_ldst")
+
+(define_insn_reservation "xburst_int_prefetch" 0
+  (and (eq_attr "cpu" "jz4740,jz4760,jz4770")
+       (eq_attr "type" "prefetch,prefetchx"))
+  "xburst_ldst")
+
+(define_insn_reservation "xburst_int_store" 0
+  (and (eq_attr "cpu" "jz4740,jz4760,jz4770")
+       (eq_attr "type" "store"))
+  "xburst_ldst")
+
+;; integer divide have latencies up to 35
+(define_insn_reservation "xburst_idiv" 35
+  (and (eq_attr "cpu" "jz4740,jz4760,jz4770")
+       (eq_attr "type" "idiv"))
+  "xburst_int_arith+(xburst_int_mpydiv*35)")
+
+;; 32x32 multiply
+(define_insn_reservation "xburst_mul" 4
+  (and (eq_attr "cpu" "jz4740,jz4760,jz4770")
+       (and (eq_attr "type" "imul,imul3")
+	    (eq_attr "mode" "SI")))
+  "(xburst_int_arith+xburst_int_mpydiv)*3")
+
+;; 32x32 multiply and add/sub
+;; 16x32 is faster, but there's no way to detect this
+(define_insn_reservation "xburst_madd" 4
+  (and (eq_attr "cpu" "jz4740,jz4760,jz4770")
+       (and (eq_attr "type" "imadd")
+	    (eq_attr "mode" "SI")))
+  "(xburst_int_arith+xburst_int_mpydiv)*3")
+
+;; Move to HI/LO -> MADD/MSUB,MFHI/MFLO has a 0 cycle latency.
+(define_insn_reservation "xburst_int_mthilo" 0
+  (and (eq_attr "cpu" "jz4740,jz4760,jz4770")
+       (eq_attr "type" "mthi,mtlo"))
+  "xburst_int_arith+xburst_int_mpydiv")
+
+;; Move from HI/LO -> integer operation has a 4 cycle latency.
+(define_insn_reservation "xburst_int_mfhilo" 3
+  (and (eq_attr "cpu" "jz4740,jz4760,jz4770")
+       (eq_attr "type" "mfhi,mflo"))
+  "xburst_int_arith+xburst_int_mpydiv")
+
+;; All other integer insns.
+(define_insn_reservation "xburst_int_alu" 0
+  (and (eq_attr "cpu" "jz4740,jz4760,jz4770")
+       (eq_attr "type" "arith,condmove,const,logical,move,nop,shift,signext,slt,clz"))
+  "xburst_int_arith")
+
+(define_insn_reservation "xburst_int_branch" 0
+  (and (eq_attr "cpu" "jz4740,jz4760,jz4770")
+       (eq_attr "type" "branch"))
+  "xburst_int_arith")
+
+(define_insn_reservation "xburst_int_jump" 0
+  (and (eq_attr "cpu" "jz4740,jz4760,jz4770")
+       (eq_attr "type" "jump,call"))
+  "xburst_int_arith")
+
+;; mfcx/mtcx - non FPU
+;; (Disabled until we add cop0 support)
+;; (define_insn_reservation "xburst_int_cop" 3
+;;   (and (eq_attr "cpu" "jz4740,jz4760,jz4770")
+;;      (eq_attr "type" "cop0"))
+;;  "xburst_int_arith")
+
+;; Unknown or multi - single issue
+(define_insn_reservation "xburst_unknown" 0
+  (and (eq_attr "cpu" "jz4740,jz4760,jz4770")
+       (eq_attr "type" "unknown,multi,atomic,syncloop"))
+  "xburst_int_arith+xburst_int_mpydiv")
+
+;; --------------------------------------------------------------
+;; Bypass to Consumer
+;; --------------------------------------------------------------
+
+;; mult/madd/msub->int_mfhilo  : 4 cycles (default)
+;; mult->madd/msub             : 1 cycles
+;; madd/msub->madd/msub        : 1 cycles
+(define_bypass 1 "xburst_mul" "xburst_madd"
+  "mips_linked_madd_p")
+(define_bypass 1 "xburst_madd" "xburst_madd"
+  "mips_linked_madd_p")
+
+;; --------------------------------------------------------------
+;; Floating Point Instructions
+;; --------------------------------------------------------------
+
+(define_cpu_unit "xburst_fpu_arith" "xburst_fpu")
+
+;; fadd, fabs, fneg
+(define_insn_reservation "xburst_fadd" 4
+  (and (eq_attr "cpu" "jz4760,jz4770")
+       (eq_attr "type" "fadd,fabs,fneg"))
+  "xburst_fpu_arith")
+
+;; fmove, fcmove
+(define_insn_reservation "xburst_fmove" 4
+  (and (eq_attr "cpu" "jz4760,jz4770")
+       (eq_attr "type" "fmove"))
+  "xburst_fpu_arith")
+
+;; fload
+(define_insn_reservation "xburst_fload" 3
+  (and (eq_attr "cpu" "jz4760,jz4770")
+       (eq_attr "type" "fpload"))
+  "xburst_ldst")
+
+;; fstore
+(define_insn_reservation "xburst_fstore" 1
+  (and (eq_attr "cpu" "jz4760,jz4770")
+       (eq_attr "type" "fpstore"))
+  "xburst_ldst")
+
+;; fmul, fmadd
+(define_insn_reservation "xburst_fmul_sf" 4
+  (and (eq_attr "cpu" "jz4760,jz4770")
+       (and (eq_attr "type" "fmul,fmadd")
+	    (eq_attr "mode" "SF")))
+  "xburst_fpu_arith")
+
+(define_insn_reservation "xburst_fmul_df" 5
+  (and (eq_attr "cpu" "jz4760,jz4770")
+       (and (eq_attr "type" "fmul,fmadd")
+	    (eq_attr "mode" "DF")))
+  "xburst_fpu_arith")
+
+
+;; fdiv, fsqrt, frsqrt
+(define_insn_reservation "xburst_fdiv_sf" 17
+  (and (eq_attr "cpu" "jz4760,jz4770")
+       (and (eq_attr "type" "fdiv,fsqrt,frsqrt")
+	    (eq_attr "mode" "SF")))
+  "xburst_fpu_arith")
+
+(define_insn_reservation "xburst_fdiv_df" 32
+  (and (eq_attr "cpu" "jz4760,jz4770")
+       (and (eq_attr "type" "fdiv,fsqrt")
+	    (eq_attr "mode" "DF")))
+  "xburst_fpu_arith")
+
+;; frsqrt
+(define_insn_reservation "xburst_frsqrt_df" 36
+  (and (eq_attr "cpu" "jz4760,jz4770")
+       (and (eq_attr "type" "frsqrt")
+	    (eq_attr "mode" "DF")))
+  "xburst_fpu_arith")
+
+;; fcmp
+(define_insn_reservation "xburst_fcmp" 4
+  (and (eq_attr "cpu" "jz4760,jz4770")
+       (eq_attr "type" "fcmp"))
+  "xburst_fpu_arith")
+
+;; fcvt
+(define_insn_reservation "xburst_fcvt" 4
+  (and (eq_attr "cpu" "jz4760,jz4770")
+       (eq_attr "type" "fcvt"))
+  "xburst_fpu_arith")
+
+;; fxfer (mtc1, dmtc1)
+(define_insn_reservation "xburst_fxfer_to_c1" 4
+  (and (eq_attr "cpu" "jz4760,jz4770")
+       (eq_attr "type" "mtc"))
+  "xburst_fpu_arith")
+
+;; fxfer (mfc1, dmfc1)
+(define_insn_reservation "xburst_fxfer_from_c1" 1
+  (and (eq_attr "cpu" "jz4760,jz4770")
+       (eq_attr "type" "mfc"))
+  "xburst_fpu_arith")
-- 
2.41.0

